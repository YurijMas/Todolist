{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","_ref","todo","index","onChange","removeTodo","useContext","classes","completed","push","console","log","react_default","a","createElement","style","className","join","type","checked","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","Loader","Modal","state","isOpen","_this2","this","Fragment","setState","Component","AddTodo","lazy","Promise","resolve","setTimeout","__webpack_require__","e","then","bind","App","_React$useState","useState","_React$useState2","Object","slicedToArray","setTodos","_React$useState3","_React$useState4","loading","setLoading","useEffect","fetch","response","json","context","Provider","value","filter","Modal_Modal_Modal","Suspense","fallback","onCreate","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db6685b2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from 'react'\r\nimport Context from '../context.js'\r\n\r\nconst styles = {\r\n  li: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '.5rem 1rem',\r\n    border: '1px solid #ccc',\r\n    borderRadius: '4px',\r\n    marginBottom: '.5rem'\r\n  },\r\n\r\n  input: {\r\n    marginRight: '1rem'\r\n  }\r\n}\r\n\r\nexport default function TodoItem({ todo, index, onChange }) {\r\n  const { removeTodo } = useContext(Context);\r\n  const classes = [];\r\n\r\n  if (todo.completed) {\r\n    classes.push('done');\r\n  }\r\n\r\n  console.log('todo', todo);\r\n  return (\r\n    <li style={styles.li}>\r\n      <span className={classes.join(' ')}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={todo.completed}\r\n          style={styles.input}\r\n          onChange={() => onChange(todo.id)}/>\r\n        <strong>{index + 1}</strong>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n\r\n      <button className='rm' onClick={() => removeTodo(todo.id)}>&times;</button>\r\n    </li>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: 'none',\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n}\r\n\r\nexport default function TodoList(props) {\r\n  return (\r\n    <ul style={styles.ul}>\r\n\r\n       { props.todos.map((todo, index) => {\r\n         return <TodoItem todo={todo} key={todo.id} index={index}\r\n         onChange={props.onToggle}/>;\r\n       })\r\n    }\r\n    </ul>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default () => <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}><div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div></div>\r\n","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default class Modal extends React.Component {\r\n  state = {\r\n    isOpen: false\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={() => this.setState({isOpen: true})}>Open modal</button>\r\n\r\n        {this.state.isOpen && (<div className='modal'>\r\n          <div className='modal-body'>\r\n            <h1>Modal title</h1>\r\n            <p>I am awesome modal!</p>\r\n            <button onClick={() => this.setState({isOpen: false})}>Close modal</button>\r\n          </div>\r\n        </div>)}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { useEffect } from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context';\nimport Loader from './Loader';\nimport Modal from './Modal/Modal';\n\nconst AddTodo = React.lazy(() => new Promise(resolve => {\n  setTimeout(() => {\n    resolve(import('./Todo/AddTodo'))\n  }, 3000)\n}))\n\nfunction App() {\n  const [todos, setTodos]= React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos);\n          setLoading(false);\n        }, 2000)\n      })\n  }, [])\n\n  function toggleTodo(id) {\n    setTodos(todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    }))\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat([{\n      title,\n      id: Date.now(),\n      completed: false\n    }]))\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className ='wrapper'>\n          <h1>React tutorial</h1>\n          <Modal />\n          <React.Suspense fallback={<p>Loading...</p>}>\n            <AddTodo onCreate={addTodo}/>\n          </React.Suspense>\n\n          {loading && <Loader />}\n          {todos.length ? (\n            <TodoList todos={todos} onToggle={toggleTodo}/>\n        ) : (\n          loading ? null : (\n          <p>No todos</p>\n        )\n        )}\n\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}